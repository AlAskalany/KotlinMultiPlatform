//apply plugin: 'kotlin-multiplatform'
//apply plugin: 'kotlinx-serialization'

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            compilations.main.outputKinds('FRAMEWORK')
        }

        fromPreset(presets.jvm, 'android')
    }

    def STRING = "String"
    def INT = "int"

   //buildConfigField STRING, "GOOGLE_API_KEY", '"AIzaSyDztvy-kOw1lPY0nNOSPps7LGEkM5D-c_0"'
   //buildConfigField STRING, "GOOGLE_API_BOOKS_URL_BASE", '"https://www.googleapis.com/"'

   //buildConfigField STRING, "NOTIFICATION_CHANNEL_ALARMS_ID", '"NOTIFICATION_CHANNEL_ALARMS_ID"'
   //buildConfigField STRING, "NOTIFICATION_CHANNEL_ALARMS_NAME", '"Books Alarms"'


    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'

            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializer_version"

            implementation "io.ktor:ktor-client-core:$ktor_version"
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'

            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"
            implementation "io.ktor:ktor-client-android:$ktor_version"
        }

        iosMain.dependencies  {
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializer_version"
            implementation "io.ktor:ktor-client-ios:$ktor_version"
        }



    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

//task packForXCode(type: Sync) {
//    final File frameworkDir = new File(buildDir, "xcode-frameworks")
//    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
//
//    inputs.property "mode", mode
//    dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)
//
//    from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
//    into frameworkDir
//
//    doLast {
//        new File(frameworkDir, 'gradlew').with {
//            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
//            setExecutable(true)
//        }
//    }
//}
//
//tasks.build.dependsOn packForXCode


task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app .framework.dSYM'
        }
    }
}