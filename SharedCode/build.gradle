apply plugin: 'org.jetbrains.kotlin.multiplatform'

apply plugin: 'kotlinx-serialization'

apply plugin: 'com.squareup.sqldelight'

apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    // By default the android gradle plugin expects to find the kotlin source files in
    // the folder `main` and the test in the folder `test`. This is to be able place
    // the source code files inside androidMain and androidTest folders
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
        test {
            java.srcDirs = ['src/androidTest/kotlin']
            res.srcDirs = ['src/androidTest/res']
        }
    }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")  \
                               ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            //compilations.main.outputKinds('FRAMEWORK')
        }

        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            //api 'org.jetbrains.kotlin:kotlin-stdlib-common'

            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common:1.3.31'

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-core:$ktor_version"

            // SQL Delight
            implementation "com.squareup.sqldelight:runtime-metadata:$sqldelight_version"

        }

        androidMain.dependencies {
            //api 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common:1.3.31'

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-android:$ktor_version"

            // SQL Delight
            //implementation "com.squareup.sqldelight:runtime-jvm:$sqldelight_version"
            //implementation "com.squareup.sqldelight:runtime-jvm:$sqldelight_version"
            implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"
        }

        iosMain.dependencies {
            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-ios:$ktor_version"
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "io.mockk:mockk:1.9.3"
            }
        }

        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'com.android.support.test:runner:1.0.2'

                // actually not needed, see https://youtrack.jetbrains.com/issue/KT-31189
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"
                implementation "com.soywiz:klock-android:$klock_version"

                implementation "io.mockk:mockk:1.9.3"
            }
        }

    }
}


//task packForXCode(type: Sync) {
//    final File frameworkDir = new File(buildDir, "xcode-frameworks")
//    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
//
//    inputs.property "mode", mode
//    dependsOn kotlin.targets.iOS.compilations.main.linkTaskName("FRAMEWORK", mode)
//
//    from { kotlin.targets.iOS.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
//    into frameworkDir
//
//    doLast {
//        new File(frameworkDir, 'gradlew').with {
//            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
//            setExecutable(true)
//        }
//    }
//}
//
//tasks.build.dependsOn packForXCode


task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app .framework.dSYM'
        }
    }
}


sqldelight {
    //The package where all entities will be generated in
    //More options https://github.com/square/sqldelight/blob/master/RELEASE_CANDIDATE.md
    //packageName = 'com.jarroyo.firstkotlinmultiplatform'
    Database {
        packageName = "com.jarroyo.firstkotlinmultiplatform"
    //    // By default this is ["sqldelight"], and means your sqldelight will be in
    //    // folders like 'src/main/db' instead of 'src/main/sqldelight'
    //    //sourceFolders = ["sqldelight"]

    //    // Defaults to file("src/main/sqldelight")
    //    //schemaOutputDirectory = file("src/main/sqldelight/migrations")

    //    // Optionally specify schema dependencies on other gradle projects
    //    //dependency project(':OtherProject')
    }
    // For native targets, chose wether sqlite should be automatically linked.
    // Defaults to true.
    //linkSqlite = false

    //QueryWrapper {
    //    packageName = "com.jarroyo.firstkotlinmultiplatform"
    //}

}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}